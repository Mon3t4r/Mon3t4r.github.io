<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>自由贩卖机</title><link>https://Mon3t4r.github.io</link><description>Noting Right，Noting Left</description><copyright>自由贩卖机</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/98069164?v=4</url><title>avatar</title><link>https://Mon3t4r.github.io</link></image><lastBuildDate>Tue, 01 Jul 2025 10:11:01 +0000</lastBuildDate><managingEditor>自由贩卖机</managingEditor><ttl>60</ttl><webMaster>自由贩卖机</webMaster><item><title>《BUDAlloc：通过解耦内核与虚拟地址管理来防御“释放后使用”漏洞》AI解读</title><link>https://Mon3t4r.github.io/post/%E3%80%8ABUDAlloc%EF%BC%9A-tong-guo-jie-ou-nei-he-yu-xu-ni-di-zhi-guan-li-lai-fang-yu-%E2%80%9C-shi-fang-hou-shi-yong-%E2%80%9D-lou-dong-%E3%80%8BAI-jie-du.html</link><description># **BUDAlloc 中文解读**

**《BUDAlloc：通过解耦内核与虚拟地址管理来防御“释放后使用”漏洞》**

这篇论文介绍了一种名为 **BUDAlloc** 的新型内存分配器，旨在高效地检测和防御“释放后使用”（Use-After-Free, UAF）这一严重的安全漏洞。</description><guid isPermaLink="true">https://Mon3t4r.github.io/post/%E3%80%8ABUDAlloc%EF%BC%9A-tong-guo-jie-ou-nei-he-yu-xu-ni-di-zhi-guan-li-lai-fang-yu-%E2%80%9C-shi-fang-hou-shi-yong-%E2%80%9D-lou-dong-%E3%80%8BAI-jie-du.html</guid><pubDate>Tue, 01 Jul 2025 10:10:35 +0000</pubDate></item><item><title>利用eBPF进行内核级威胁检测：权限提升漏洞与缓解策略分析</title><link>https://Mon3t4r.github.io/post/li-yong-eBPF-jin-xing-nei-he-ji-wei-xie-jian-ce-%EF%BC%9A-quan-xian-ti-sheng-lou-dong-yu-huan-jie-ce-lve-fen-xi.html</link><description>

# **利用eBPF进行内核级威胁检测：权限提升漏洞与缓解策略分析**

**执行摘要**

eBPF（扩展伯克利数据包过滤器）技术代表了内核安全领域的一次范式转换，为操作系统提供了前所未有的可观测性和强制执行能力。</description><guid isPermaLink="true">https://Mon3t4r.github.io/post/li-yong-eBPF-jin-xing-nei-he-ji-wei-xie-jian-ce-%EF%BC%9A-quan-xian-ti-sheng-lou-dong-yu-huan-jie-ce-lve-fen-xi.html</guid><pubDate>Tue, 01 Jul 2025 08:28:27 +0000</pubDate></item><item><title>SMAP/SMEP/KPTI 防护机制分析</title><link>https://Mon3t4r.github.io/post/SMAP-SMEP-KPTI%20-fang-hu-ji-zhi-fen-xi.html</link><description>

# **深度剖析：现代内核防护技术巡礼 \- SMEP、SMAP 与 KPTI**

## **引言：看不见的堡垒——我们为何要隔离内核**

### **权限分离：操作系统安全的基石**

现代操作系统的设计核心在于一个基本原则：权限分离。</description><guid isPermaLink="true">https://Mon3t4r.github.io/post/SMAP-SMEP-KPTI%20-fang-hu-ji-zhi-fen-xi.html</guid><pubDate>Tue, 24 Jun 2025 03:19:00 +0000</pubDate></item><item><title>cred 提权 LKM</title><link>https://Mon3t4r.github.io/post/cred%20-ti-quan-%20LKM.html</link><description>测试环境  6.6.0-38-generic ARM 架构
安装内核头文件：

```Bash

sudo apt update
sudo apt install linux-headers-$(uname -r)


sudo dnf install kernel-devel
```

编译
```bash
make
```
使用
```bash
sudo insmod ko_cred_tamper.ko # 安装模块
echo 'test' &gt; /proc/elevate_shell #往 /proc/elevate_shell写任意信息实现提权
sudo rmmod ko_cred_tamper.ko #卸载模块
dmesg -T | grep ko_cred_tamper # 查看内核模块日志
```

工作流程如下：
1. 模块加载 (insmod ko_cred_tamper.ko)  
- 初始化函数 ko_cred_tamper_init 执行
    - 在 /proc 文件系统下创建文件 elevate_shell（权限 0666，所有用户可读写）。</description><guid isPermaLink="true">https://Mon3t4r.github.io/post/cred%20-ti-quan-%20LKM.html</guid><pubDate>Tue, 24 Jun 2025 03:05:01 +0000</pubDate></item><item><title>Linux cred 结构体及其在提权中的利用</title><link>https://Mon3t4r.github.io/post/Linux%20cred%20-jie-gou-ti-ji-qi-zai-ti-quan-zhong-de-li-yong.html</link><description>
Gemini 2.5 Pro DeepResearch
# **权力的核心：深入解析 Linux cred 结构体及其在提权中的利用**

## **一. 引言：Linux 内核中的权力中枢**

在 Linux 的安全模型中，一个进程的身份即是其权力的体现。</description><guid isPermaLink="true">https://Mon3t4r.github.io/post/Linux%20cred%20-jie-gou-ti-ji-qi-zai-ti-quan-zhong-de-li-yong.html</guid><pubDate>Tue, 24 Jun 2025 02:48:50 +0000</pubDate></item></channel></rss>